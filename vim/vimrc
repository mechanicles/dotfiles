"                         ███████████████████████████
"                         ███████▀▀▀░░░░░░░▀▀▀███████
"                         ████▀░░░░░░░░░░░░░░░░░▀████
"                         ███│░░░░░░░░░░░░░░░░░░░│███
"                         ██▌│░░░░░░░░░░░░░░░░░░░│▐██
"                         ██░└┐░░░░░░░░░░░░░░░░░┌┘░██
"                         ██░░└┐░░░░░░░░░░░░░░░┌┘░░██
"                         ██░░┌┘▄▄▄▄▄░░░░░▄▄▄▄▄└┐░░██
"                         ██▌░│██████▌░░░▐██████│░▐██
"                         ███░│▐███▀▀░░▄░░▀▀███▌│░███
"                         ██▀─┘░░░░░░░▐█▌░░░░░░░└─▀██
"                         ██▄░░░▄▄▄▓░░▀█▀░░▓▄▄▄░░░▄██
"                         ████▄─┘██▌░░░░░░░▐██└─▄████
"                         █████░░▐█─┬┬┬┬┬┬┬─█▌░░█████
"                         ████▌░░░▀┬┼┼┼┼┼┼┼┬▀░░░▐████
"                         █████▄░░░└┴┴┴┴┴┴┴┘░░░▄█████
"                         ███████▄░░░░░░░░░░░▄███████
"                         ██████████▄▄▄▄▄▄▄██████████
"                         ███████████████████████████
"
"                                   Welcome!
"
" Thanks:
"  Tim Pope
"  Gmarik
"  Mislav Marohnić
"  Other

set nocompatible              " be iMproved, required

" VIM-PLUG
call plug#begin('~/.vim/plugged')

" SNIPMATE && SIPPESTS DEPENDENCIES
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }

" RUBY
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby'}
Plug 'skwp/vim-rspec'
Plug 'sunaku/vim-ruby-minitest'

" JAVASCRIPT
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'
Plug 'mxw/vim-jsx'
Plug 'burnettk/vim-angular'
Plug 'posva/vim-vue'

" TPOPE
Plug 'tpope/vim-rails'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-git'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-sleuth' " Automatically adjusts 'shiftwidth' and 'expandtab' heuristically

Plug 'junegunn/gv.vim'

" COLORSCHEME
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'w0ng/vim-hybrid'
Plug 'ajh17/Spacegray.vim'
Plug 'yosiat/oceanic-next-vim'
Plug 'nanotech/jellybeans.vim'
Plug 'tomasr/molokai'
Plug 'KabbAmine/yowish.vim'
Plug 'rakr/vim-one'
Plug 'chriskempson/base16-vim'
Plug 'joshdick/onedark.vim'

" ENHANCEMENT
Plug 'airblade/vim-gitgutter'
Plug 'ntpeters/vim-better-whitespace'
Plug 'ngmy/vim-rubocop'
Plug 'terryma/vim-expand-region'
"Plug 'ap/vim-buftabline'
Plug 'janko-m/vim-test'
Plug 'Raimondi/delimitMate'
Plug 'rizzatti/dash.vim',  { 'on': 'Dash' }
Plug 'henrik/vim-indexed-search' " Keep this. If confusion please check `help`
Plug 'wincent/terminus' " Good for vim in terminal, it acts like GUI vim.
Plug 'Xuyuanp/nerdtree-git-plugin'

" PRODUCTIVITY
Plug 'AndrewRadev/splitjoin.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ivalkeen/vim-ctrlp-tjump'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle'    }
Plug 'ervandew/supertab'
Plug 'scrooloose/syntastic'
Plug 'majutsushi/tagbar',   { 'on': 'TagbarToggle'      }
Plug 'easymotion/vim-easymotion'
Plug 'mileszs/ack.vim', { 'on': 'Ack' }
Plug 'szw/vim-maximizer'
Plug 'junegunn/vim-easy-align'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'dkprice/vim-easygrep'
Plug 'rhysd/clever-f.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-repeat'
Plug 'wikitopian/hardmode'
Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'dbmrq/vim-ditto' " Stop repeating yourself
Plug 'wellle/targets.vim' " provides additional text objects
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" FUN
Plug 'chrisbra/unicode.vim',      { 'on': ['<plug>(UnicodeComplete)', '<plug>(UnicodeGA)', 'UnicodeTable'] }

" ASYNCHRONOUS
Plug 'thinca/vim-quickrun' " Run code using 'quickrun' command. Good for Ruby code
"Plug 'w0rp/ale'

" EXTRA
Plug 'lifepillar/vim-cheat40'
Plug 'johngrib/vim-game-code-break'
Plug 'chrisbra/csv.vim'

call plug#end()

" VIM HAS ITS VERY OWN'S 'ADD-PACKAGE' FEATURE:
packadd! matchit " This plugin makes the '%' command jump to matching HTML tags, if/else/endif in Vim scripts, etc.

" COLORSHEME SETTINGS
if has('gui_running')
  set t_Co=256
  let g:one_allow_italics = 1 " I love italic for comments
  "colorscheme molokai
  colorscheme onedark
else
  colorscheme hybrid
endif

" BASIC SETUP
syntax enable
set number                        " show line numbers
set numberwidth=5
set ruler                         " show the cursor position all the time
set title                         " show file in titlebar
set encoding=utf-8                " set default encoding to UTF-8
set history=50                    " keep 50 lines of command line history
set mouse=a                       " automatically enable mouse usage
set mousehide                     " hide the mouse cursor while typing
set textwidth=80
set showcmd                       " show partial commands below the status line
set wildmenu                      " visual autocomplete for command menu
set ttyfast                       " faster redrawing.
set lazyredraw                    " don't redraw while executing macros (good performance config)
set showmatch                     " show matching brackets
set showmode                      " show current mode in command-line.
set matchtime=2                   " show matching bracket for 0.2 seconds
set autoindent                    " always set auto indenting on
set display=lastline              " show as much as possible of the last line.
set scrolloff=3                   " minimum lines to keep above and below cursor
set hidden                        " switch between buffers without having to save first.
set foldenable                    " auto fold code
set pastetoggle=<F2>
set confirm                       " get a dialog when :q, :w, or :wq fails
set cursorline                    " find the current line quickly.
set wrapscan                      " searches wrap around end-of-file
set report=0                      " always report changed lines.
set synmaxcol=200                 " only highlight the first 200 columns.

" TENDERLOVE'S SETTINGS
set suffixesadd=.rb
set path+=lib/**,test/**
let g:ruby_path = &path

" WHITESPACE
set nowrap                        " don't wrap text
set tabstop=2                     " tab spacing
set softtabstop=2                 " unify
set shiftwidth=2                  " indent/outdent by 2 columns
set expandtab                     " use spaces instead of tabs
set smarttab                      " use tabs at the start of a line, spaces elsewhere
set backspace=indent,eol,start    " backspace through everything in insert mode
set list                          " show invisible characters
set nojoinspaces                  " Use only 1 space after "." when joining lines, not 2

" AUTO-RELOAD BUFFERS WHEN FILE CHANGED ON DISK
set autoread

" DISABLE SWAP FILES; SYSTEMS DON'T CRASH THAT OFTEN THESE DAYS
set updatecount=0

" INDICATOR CHARS
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

set showbreak=↪\

" SEARCHING
set hlsearch                      " highlight matches
set incsearch                     " incremental searching
set ignorecase                    " searches are case insensitive...
set smartcase                     " unless they contain at least one capital letter
set gdefault                      " have :s///g flag by default on


" TIME OUT ON KEY CODES BUT NOT MAPPINGS. BASICALLY THIS MAKES TERMINAL VIM WORK SANELY.
set notimeout
set ttimeout
set ttimeoutlen=100

" TAB COMPLETION
set wildmode=list:longest,list:full

" DISABLE OUTPUT AND VCS FILES
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem,tags,.fugitiveblame

" DISABLE ARCHIVE FILES
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" IGNORE BUNDLER AND SASS CACHE
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" IGNORE RAILS TEMPORARY ASSET CACHES
set wildignore+=*/tmp/*,*/solr/*,*/coverage/*,*/features/*,*/public/uploads/*

" DISABLE TEMP AND BACKUP FILES
set wildignore+=*.swp,*~,._*,tags

" BACKUP AND SWAP FILES
set nobackup                      " turn backup off, since most stuff is in SVN, Git etc anyway...
set nowb                          " no writebackup
set noswapfile

" OPEN NEW SPLIT PANES TO RIGHT AND BOTTOM, WHICH FEELS MORE NATURAL
set splitright
set splitbelow

" MAC'S OPTION KEY FOR YANKRING
if has('gui_running')
  set macmeta
endif

" AUTOCOMPLETE WITH DICTIONARY WORDS WHEN SPELL CHECK IS ON
set complete+=kspell

" ALWAYS USE VERTICAL DIFFS
set diffopt+=vertical

if has("statusline") && !&cp
  set laststatus=2              " always show the status bar
  set statusline=%f\ %m\ %r     " filename, modified, readonly
  set statusline+=%=            " switch to the right side
  set statusline+=\ %l/%L[%p%%] " current line/total lines
  set statusline+=\ %3v         " current column
  set statusline+=\ %Y\ %{fugitive#head()}

" SYNTASTIC SETTINGS (TAKEN FROM HTTP://USEVIM.COM/2016/03/07/LINTING/)
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
endif

let g:mapleader = ","

" CTRLP SETTINGS
let g:ctrlp_use_caching       = 0
let g:ctrlp_switch_buffer     = 0
let g:ctrlp_working_path_mode = 0

" Idea from : http://www.charlietanksley.net/blog/blog/2011/10/18/vim-navigation-with-lustyexplorer-and-lustyjuggler/
" Open CtrlP starting from a particular path, making it much
" more likely to find the correct thing first. mnemonic 'jump to [something]'
map ,ja :CtrlP app/assets<CR>
map ,jm :CtrlP app/models<CR>
map ,jc :CtrlP app/controllers<CR>
map ,jv :CtrlP app/views<CR>
map ,jh :CtrlP app/helpers<CR>
map ,jl :CtrlP lib<CR>
map ,jp :CtrlP public<CR>
map ,js :CtrlP app/services<CR>
map ,jf :CtrlP test/fixtures<CR>
map ,jd :CtrlP db<CR>
map ,jC :CtrlP config<CR>
map ,je :CtrlP config/environments<CR>
map ,jV :CtrlP vendor<CR>
map ,jF :CtrlP factories<CR>
map ,jT :CtrlP test<CR>

" TREAT <li> AND <p> TAGS LIKE THE BLOCK TAGS THEY ARE
let g:html_indent_tags = 'li\|p'

" ALLOWS CURSOR CPANGE IN TMUX MODE
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" SNIPPETS ARE ACTIVATED BY SHIFT+TAB
let g:snippetsEmu_key = "<S-Tab>"

" NERDTREE SETTINGS
let g:NERDTreeHijackNetrw=1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

"VIM-TEST PLUGIN SETTINGS
let test#strategy = "iterm"

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" MAKE YCM COMPATIBLE WITH ULTISNIPS (USING SUPERTAB)
let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" Better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" The silver searcher (Faster than the ack)
" Invoke ag using ack.vim
if executable("ag")
  " Use Ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  let g:ackprg = 'ag --nogroup --nocolor --column'
  let g:agprg="ag --column"

  let g:ctrlp_user_command =
    \ 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Default to filename searches - so that appctrl will find application
" controller
let g:ctrlp_by_filename = 1

" Don't jump to already open window. This is annoying if you are maintaining
" several Tab workspaces and want to open two windows into the same file.
let g:ctrlp_switch_buffer = 0

" Every time you open a git object using fugitive it creates a new buffer.
" This means that your buffer listing can quickly become swamped with
" fugitive buffers. This prevents this from becomming an issue:
autocmd BufReadPost fugitive://* set bufhidden=delete

let g:github_enterprise_urls = ['https://github.com']

" Turn off default key mappings
let g:multi_cursor_use_default_mapping=0

" Ctrl-n, Ctrl-p, Ctrl-x, and <Esc> are mapped in the special multicursor
" mode once you've added at least one virtual cursor to the buffer
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Time limit of each task in seconds for vim-plug
let g:plug_timeout = 1000

 "Highlight column for 80 characters.
if exists('+colorcolumn')
  set colorcolumn=81
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>81v.\+', -1)
endif

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" puts the calller (Thanks to @tenderlove)
nnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc>

" Mapping for debugging in Ruby
nnoremap <leader>db obinding.pry<esc>

nnoremap \ :Ack<SPACE>

" Disable 'Entering Ex mode'
map Q <Nop>
map gs <Nop>

" MOVEMENT
nnoremap j gj
nnoremap k gk

" highlight last inserted text
nnoremap gV `[v`]

" Ruby hash syntax conversion
nnoremap <F12> :%s/:\([^ ]*\)\(\s*\)=>/\1:/g<return>

" yank to system clipboard
map <leader>y "*y

" paste lines from unnamed register and fix indentation
nmap <leader>p pV`]=
nmap <leader>P PV`]=

" Settings for vim-ditto
nmap <leader>di <Plug>ToggleDitto      " Turn it on and off

nmap =d <Plug>DittoNext                " Jump to the next word
nmap -d <Plug>DittoPrev                " Jump to the previous word
nmap +d <Plug>DittoGood                " Ignore the word under the cursor
nmap _d <Plug>DittoBad                 " Stop ignoring the word under the cursor
nmap ]d <Plug>DittoMore                " Show the next matches
nmap [d <Plug>DittoLess                " Show the previous matches

" expand %% to current directory in command-line mode
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags -R .<CR>

map <Leader>n :NERDTreeToggle<CR>

map <c-a> ggVG

" format the entire file
nmap <leader>fef ggVG=

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" find Git merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Adjust viewports to the same size
map <Leader>= <C-w>=

map <leader>gf :e <cfile><cr>

" vim-maximizer (Zoom)
noremap <Leader>zw :MaximizerToggle<CR>
vnoremap <Leader>zw :MaximizerToggle<CR>gv
inoremap <Leader>zw <C-o>:MaximizerToggle<CR>

" TagbarToggle
nnoremap <Leader>rt :TagbarToggle<CR>

" disable cursor keys in normal mode
map <Left>  :echoe "Use h"<cr>
map <Right> :echoe "Use l"<cr>
map <Up>    :echoe "Use k"<cr>
map <Down>  :echoe "Use j"<cr>

" Git Hunks
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
nmap <Leader>hv <Plug>GitGutterPreviewHunk " Preview hunk

"Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

"Map Control-# to switch tabs
map  <C-0> 0gt
imap <C-0> <Esc>0gt
map  <C-1> 1gt
imap <C-1> <Esc>1gt
map  <C-2> 2gt
imap <C-2> <Esc>2gt
map  <C-3> 3gt
imap <C-3> <Esc>3gt
map  <C-4> 4gt
imap <C-4> <Esc>4gt
map  <C-5> 5gt
imap <C-5> <Esc>5gt
map  <C-6> 6gt
imap <C-6> <Esc>6gt
map  <C-7> 7gt
imap <C-7> <Esc>7gt
map  <C-8> 8gt
imap <C-8> <Esc>8gt
map  <C-9> 9gt
imap <C-9> <Esc>9gt

noremap <F5> :UndotreeToggle<cr>

" In command-line mode, C-a jumps to beginning (to match C-e)
cnoremap <C-a> <Home>

" vim-expand-region
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" SETTINGS for 'ap/vim-buftabline' plgin.
" Move to the next buffer
"nmap <leader>ll :bnext<CR>

" Move to the previous buffer
"nmap <leader>hh :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
"nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
"nmap <leader>bl :ls<CR>


" Exit insert mode without using Esc
inoremap jj <Esc>


" Easy edit/open commands
command! EditVim  :edit   ~/.vimrc
command! EditBash :edit   ~/.bashrc

 "bind \ (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

function! s:setWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=80
endfunction

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

let g:syntastic_error_symbol = '❌'
let g:syntastic_style_error_symbol = '⁉️'
let g:syntastic_warning_symbol = '⚠️'
let g:syntastic_style_warning_symbol = '💩'
"let g:syntastic_ruby_checkers = ['mri', 'rubocop']
"let g:syntastic_ruby_exec = '/Users/santosh/.rbenv/shims/ruby'
"let g:syntastic_ruby_rubocop_exec = '/Users/santosh/.rbenv/shims/rubocop'

" Ignore ng directives errors for AngularJS
let g:syntastic_html_tidy_ignore_errors=['proprietary attribute "ng-']

highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType {make,gitconfig} set noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setWrapping()

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json setf javascript

  " Better commit message
  au Filetype gitcommit setlocal spell textwidth=72

  " For all text files set 'textwidth' to 80 characters.
  au Filetype text setlocal textwidth=80

  " Enable spellchecking for Markdown
  au FileType markdown setlocal spell

  au FileType javascript,css,ruby,rake,erb nmap <silent> ,; :call cosco#commaOrSemiColon()<CR>
  au FileType javascript,css,ruby,rake,erb inoremap <silent> ,; <ESC>:call cosco#commaOrSemiColon()"<CR>a

  au StdinReadPre * let s:std_in=1

  au FileType markdown,text,tex,gitcommit DittoOn  " Turn on Ditto's autocmds
endif

" FIX CONSTANT SPELLING MISTAKES
iab Acheive    Achieve
iab acheive    achieve
iab Alos       Also
iab alos       also
iab Aslo       Also
iab aslo       also
iab Becuase    Because
iab becuase    because
iab Bianries   Binaries
iab Charcter   Character
iab charcter   character
iab Charcters  Characters
iab charcters  characters
iab Seperate   Separate
iab seperate   separate
iab biding     binding
iab binging    binding
iab biging     binding
iab bindng     binding
iab bindging   binding
iab bindgin    binding
iab gindin     binding
iab bindin     binding
iab bindign    binding
iab attachemnts attachments
iab attachemnt attachment
iab udpate     update

" Local config
"if filereadable($HOME . "/.vimrc.local")
  "source ~/.vimrc.local
"endif
