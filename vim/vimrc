" IMPORTANT FOR CANCELLING/ABORTING GIT COMMIT
" ALWAYS USE `:cq`.

" IMPORTANT FOR WRAPPING THE TEXT IN MARKDWON
" ALWAYS USE `gq`.

" FIND AND REPLACE IN VIM
" :grep original_string
" :cfdo %s/original_string/new_string/g | write

if has('vim_starting')
  set nocompatible               " Be iMproved
endif

" VIM-PLUG
call plug#begin('~/.vim/plugged')
  " PRODUCTIVITY {{
    Plug 'lukas-reineke/indent-blankline.nvim'
    Plug 'windwp/nvim-autopairs'
    Plug 'phaazon/hop.nvim'
    Plug 'rhysd/clever-f.vim'
    Plug 'mileszs/ack.vim'
    Plug 'wellle/targets.vim'
    Plug 'ibhagwan/fzf-lua', {'branch': 'main'}
    Plug 'mbbill/undotree'
    Plug 'rhysd/committia.vim'
    Plug 'AndrewRadev/tagalong.vim'
    Plug 'maxbrunsfeld/vim-yankstack'
    Plug 'AaronLasseigne/yank-code'
    Plug 'mrjones2014/dash.nvim', { 'do': 'make install' }
    Plug 'janko-m/vim-test'
    Plug 'dbeniamine/cheat.sh-vim'
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
    Plug 'nvim-treesitter/nvim-treesitter-textobjects'
    Plug 'akinsho/toggleterm.nvim'
    Plug 'SirVer/ultisnips'
    Plug 'MunifTanjim/nui.nvim',
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
    Plug 'nvim-tree/nvim-tree.lua'
    Plug 'kevinhwang91/nvim-bqf' " Important pugin for quickfix
    Plug 'andymass/vim-matchup'
    Plug 'windwp/nvim-spectre'
    Plug 's1n7ax/nvim-window-picker'
    Plug 'nvim-neo-tree/neo-tree.nvim'
    Plug 'stevearc/oil.nvim'

    " LSP Support
    Plug 'neovim/nvim-lspconfig'
    Plug 'williamboman/mason.nvim'
    Plug 'williamboman/mason-lspconfig.nvim'
    Plug 'folke/neodev.nvim'

    " Autocompletion
    Plug 'hrsh7th/nvim-cmp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'saadparwaiz1/cmp_luasnip'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-nvim-lua'

    " Snippets
    Plug 'L3MON4D3/LuaSnip'
    Plug 'rafamadriz/friendly-snippets'

    " EXTRA LSP Stuff
    Plug 'jose-elias-alvarez/null-ls.nvim'
    Plug 'VonHeikemen/lsp-zero.nvim'

    Plug 'numToStr/Comment.nvim'
    Plug 'lewis6991/gitsigns.nvim'
    Plug 'RRethy/nvim-treesitter-endwise'
    Plug 'pechorin/any-jump.vim'
    Plug 'folke/which-key.nvim'
    Plug 'ThePrimeagen/harpoon'
  " }}

  " RUBY {{
    Plug 'vim-ruby/vim-ruby'
    Plug 'sunaku/vim-ruby-minitest'
    Plug 'thoughtbot/vim-rspec'
  " }}

  " TPOPE's must have plugins {{
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'
    Plug 'tpope/vim-git'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-rhubarb'
    Plug 'tpope/vim-rake'
    Plug 'tpope/vim-rails'
    Plug 'tpope/vim-dispatch'
    Plug 'tpope/vim-dadbod'
    Plug 'tpope/vim-abolish'
  " }}

  " COLORSCHEME {{
    Plug 'navarasu/onedark.nvim'
    Plug 'gruvbox-community/gruvbox'
    Plug 'cocopon/iceberg.vim'
    Plug 'mhartington/oceanic-next'
    Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
    Plug 'Mofiqul/dracula.nvim'
    Plug 'olimorris/onedarkpro.nvim'
    Plug 'Mofiqul/vscode.nvim'
    Plug 'catppuccin/nvim', {'as': 'catppuccin'}
    Plug 'rose-pine/neovim'
    Plug 'oxfist/night-owl.nvim'
  " }}

  " ENHANCEMENT {{
    Plug 'sheerun/vim-polyglot'
    Plug 'wincent/terminus'
    Plug 'thinca/vim-quickrun' " Ruby code runnner
    Plug 'nvim-lualine/lualine.nvim'
    Plug 'kristijanhusak/vim-dadbod-ui' " depend on tpope/vim-dadbod
    Plug 'machakann/vim-highlightedyank'
    Plug 'folke/trouble.nvim' " May be we don't need it
    Plug 'RRethy/vim-illuminate'
    Plug 'j-hui/fidget.nvim', { 'tag': 'legacy' }
    Plug 'akinsho/bufferline.nvim', { 'tag': '*' }
  " }}

  " EXTRA {{
    Plug 'lifepillar/vim-cheat40'
    Plug 'chrisbra/csv.vim'
    " Plug 'airblade/vim-localorie'
    Plug 'ruifm/gitlinker.nvim'
    Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
  " }}

  " AI {{
    Plug 'github/copilot.vim'
  " }}

  " Load this as the very last one
  Plug 'kyazdani42/nvim-web-devicons'
call plug#end()

" keep this at the top {{
  syntax enable
" }}

packadd! dracula_pro " ~/.local/share/nvim/site/pack/themes/start/dracula_pro/

set completeopt=menu,menuone,noselect

" Exit from Terminal {{
  tnoremap <Esc> <C-\><C-n>
" }}

" Time limit of each task in seconds for vim-plug
let g:plug_timeout = 100

" airblade/vim-localorie {{
  " nnoremap <silent> <leader>lt :call localorie#translate()<CR>
  " nnoremap <silent> <leader>le :echo localorie#expand_key()<CR>
" }}

" Disable python2 provider
let g:loaded_python_provider = 0

if filereadable('/usr/local/bin/python3')
  " Avoid search, speeding up start-up.
  let g:python3_host_prog='/usr/local/bin/python3'
endif

let g:make = 'gmake'
if exists('make')
  let g:make = 'make'
endif

if has('nvim')
  " runtime! macros/matchit.vim
  let g:loaded_matchit = 1 " We use vim-matchup plugin
else
  " VIM HAS ITS VERY OWN'S 'ADD-PACKAGE' FEATURE:
  " This plugin makes the '%' command jump to matching HTML tags, if/else/endif in Vim scripts, etc.
  packadd! matchit
endif

let no_buffers_menu = 1

if has('gui_running')
  if has("gui_macvim")
    set macligatures
  endif
else
  set termguicolors
endif

set guifont=JetBrainsMono\ Nerd\ Font\ Mono:h14

" Basic setup
set clipboard=unnamedplus
set number                        " show line numbers
set ruler                         " show the cursor position all the time
set title                         " show file in titlebar
set encoding=utf-8                " set default encoding to UTF-8
set history=50                    " keep 50 lines of command line history

if !has('nvim')
  set ttymouse=xterm2
endif

set mouse=n                       " automatically enable mouse usage in normal mode.
set mousehide                     " hide the mouse cursor while typing
set textwidth=120
set showcmd                       " display incomplete commands
set ttyfast                       " faster redrawing.
set showmatch                     " show matching brackets
set noshowmode
set matchtime=2                   " show matching bracket for 0.2 seconds
set autoindent                    " always set auto indenting on
set smartindent
set display=lastline              " show as much as possible of the last line.
set scrolloff=10                  " minimum lines to keep above and below cursor
set hidden                        " switch between buffers without having to save first.
set foldenable                    " auto fold code
set pastetoggle=<F2>
set confirm                       " get a dialog when :q, :w, or :wq fails
set cursorline                    " find the current line quickly.
set wrapscan                      " searches wrap around end-of-file
set bomb
set binary
set synmaxcol=256                 " This helps to avoid very slow redrawing for long lines
set updatetime=300                " delay time. Useful for showing git sign
set undodir=~/.vim/undodir
set undofile
set number
set relativenumber

" Whitespace
set nowrap                        " don't wrap text
set tabstop=2                     " tab spacing
set expandtab                     " use spaces instead of tabs
set softtabstop=2                 " unify
set shiftwidth=2                  " indent/outdent by 2 columns
set smarttab                      " use tabs at the start of a line, spaces elsewhere
set backspace=indent,eol,start    " backspace through everything in insert mode
set list                          " show invisible characters
set nojoinspaces                  " Use only 1 space after "." when joining lines, not 2

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

set signcolumn=yes

" Disable swap files; systems don't crash that often these days
set updatecount=0

set breakindent
set showbreak=↪\
set linebreak

" Searching
set hlsearch                      " highlight matches
set incsearch                     " incremental searching
set ignorecase                    " searches are case insensitive...
set smartcase                     " unless they contain at least one capital letter
set gdefault                      " have :s///g flag by default on

" Time out on key codes but not mappings. basically this makes terminal vim work sanely.
set ttimeout
set ttimeoutlen=100
set timeoutlen=500

" Tab completion
set pumblend=17
set wildoptions=pum

" Disable output and vcs files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem,tags,.fugitiveblame

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/*,*/solr/*,*/coverage/*,*/features/*,*/public/uploads/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*,tags

" Backup and swap files
set nobackup                      " turn backup off, since most stuff is in SVN, Git etc anyway...
set nowb                          " no writebackup
set noswapfile

" Better display for messages.
set cmdheight=2

set fileformats=unix,dos,mac

" Open new split panes to right and bottom, which feels more natural
set splitright
set splitbelow

" Mac's option key for yankring
if has('gui_running' && !has('nvim'))
  set macmeta
endif

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
if &diff
  set diffopt-=internal
  set difopt+=vertical
endif

" treat dash separated words as a word text object
set iskeyword+=-

lua << EOF
vim.keymap.set("n", "x", '"_x') -- do not register deleted character
EOF

" clever-f.vim plugin {{
  let g:clever_f_ignore_case = 1
" }}

" For AndrewRadev/tagalong.vim {{
  let g:tagalong_mappings = [{'c': '<leader>c'}, {'C': '<leader>C'}, 'v', 'i', 'a']
" }}

" make test commands execute using dispatch.vim {{
  let test#strategy = "neovim"
" }}

set tags+=.git/tags

" INDICATOR CHARS
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

if has("statusline") && !&cp
  set laststatus=2 " always show the status bar
endif

set winbar=%=%m\ %f " new feature

let g:mapleader = ","

" TREAT <li> AND <p> TAGS LIKE THE BLOCK TAGS THEY ARE
let g:html_indent_tags = 'li\|p'

" Every time you open a git object using fugitive it creates a new buffer.
" This means that your buffer listing can quickly become swamped with
" fugitive buffers. This prevents this from becomming an issue:
autocmd BufReadPost fugitive://* set bufhidden=delete

let g:github_enterprise_urls = ['https://github.com']

"Highlight column for 119 characters.
if exists('+colorcolumn')
  set colorcolumn=+1
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80.\+', -1)
endif

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Show next matched string at the center of screen
nnoremap n nzz
nnoremap N Nzz

" FZF settings {{
  " Project files
  " nnoremap <Leader>pf :Files<CR>
  "
  " let g:fzf_layout = { 'down': '~30%' }
  " let $FZF_DEFAULT_OPTS='--reverse'
  " noremap <leader>gc :GCheckout<CR>
" }}

" Searching {{
  nnoremap <leader>ghw :h <C-R>=expand("<cword>")<CR><CR>
" }}

" Quit current buffer {{
  nnoremap <leader>q :q<CR>
" }}

" Toggle relative line numbers {{
  nnoremap <leader>rn :set relativenumber!<CR>
" }}

" Go to start of the line {{
  nnoremap <leader>hh ^
" }}

" Go to end of the line {{
  nnoremap <leader>ll $
" }}

" mileszs/ack.vim {{
  if executable('ag')
    let g:ackprg = 'ag --vimgrep'
  endif
" }}

" Puts the calller (Thanks to @tenderlove)
nnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc>

" Disable 'Entering Ex mode'
map Q <Nop>
map gs <Nop>

" MOVEMENT
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap gj j
nnoremap gk k
vnoremap gj j
vnoremap gk k

" highlight last inserted text
nnoremap gV `[v`]

" Ruby hash syntax conversion
nnoremap <F12> :%s/:\([^ ]*\)\(\s*\)=>/\1:/g<return>

" EASY COPY AND PASTE
" yank to system clipboard
map <leader>y "*y

" paste lines from unnamed register and fix indentation
nmap <leader>p pV`]=
nmap <leader>P PV`]=

map <c-a> ggVG

" format the entire file
nmap <leader>fef ggVG=

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" find Git merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Toggle hlsearch with <leader>hls
nmap <leader>hls :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=

" disable cursor keys in normal mode
map <Left>  :echoe "Use h"<cr>
map <Right> :echoe "Use l"<cr>
map <Up>    :echoe "Use k"<cr>
map <Down>  :echoe "Use j"<cr>

"Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

" In command-line mode, C-a jumps to beginning (to match C-e)
cnoremap <C-a> <Home>

" Run the last command
nnoremap <leader><leader>c :<up>

" Easy edit/open commands
command! EditVim  :edit ~/.vimrc

function! s:setWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=80
endfunction

function! RubocopAutocorrect()
  execute "!rubocop -a " . bufname("%")
endfunction

map <silent> <Leader>cop :call RubocopAutocorrect()<cr>

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType {make,gitconfig} set noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setWrapping()

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json setf javascript

  " Treat all *html.erb and *pdf.erb files like eruby
  au BufNewFile,BufRead *html.erb set filetype=eruby.html
  au BufNewFile,BufRead *pdf.erb set filetype=eruby.html

  " Treat all *scss.erb files like scss
  au BufNewFile,BufRead *scss.erb set filetype=scss.css

  " Better commit message
  au Filetype gitcommit setlocal spell textwidth=72

  " For all text files set 'textwidth' to 80 characters.
  au Filetype text setlocal textwidth=80

  " Enable spellchecking for Markdown
  au FileType markdown setlocal spell

  au FileType javascript set formatprg=prettier\ --stdin

  " Every time you save your file(s), they'll attempt to format using the registered LSP,
  " and if none exist, it'll be a no-op.
  " TODO: FIX ME
  " au BufWritePre * lua vim.lsp.buf.formatting_sync()
endif

" janko-m/vim-test {{
  nmap <silent> <leader>tn :TestNearest<CR>
  nmap <silent> <leader>tf :TestFile<CR>
  nmap <silent> <leader>ts :TestSuite<CR>
  nmap <silent> <leader>tl :TestLast<CR>
  nmap <silent> <leader>tv :TestVisit<CR>
" }}

" nvim-tree {{
  :nmap <Leader>n :NeoTreeShowToggle<CR>
  :nmap <Leader>F :NeoTreeReveal<CR>
" }}

" any-jump.vim {{
  let g:any_jump_search_prefered_engine = 'ag'
  let g:any_jump_preview_lines_count = 10
  let g:any_jump_ignored_files = ['*.tmp', '*.temp', '*.log']
" }}

" nvim-telescope/telescope.nvim {{
  nnoremap <c-b> <cmd>lua require('telescope.builtin').buffers()<cr>
  nnoremap <c-p> <cmd>lua require('telescope.builtin').find_files()<cr>
  nnoremap <leader>gs <cmd>lua require('telescope.builtin').git_status()<cr>
  nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
  nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
" }}

" mrjones2014/dash.nvim {{
  nnoremap <leader>D <cmd>:DashWord<cr>
" }}

" akinsho/toggleterm.nvim {{
   " set
  let g:toggleterm_terminal_mapping = '<Leader>tt'
  " or manually...
  autocmd TermEnter term://*toggleterm#*
        \ tnoremap <silent><Leader>tt <Cmd>exe v:count1 . "ToggleTerm"<CR>

  " By applying the mappings this way you can pass a count to your
  " mapping to open a specific window.
  " For example: 2<C-t> will open terminal 2
  nnoremap <silent><Leader>tt <Cmd>exe v:count1 . "ToggleTerm"<CR>
  inoremap <silent><Leader>tt <Esc><Cmd>exe v:count1 . "ToggleTerm"<CR>
" }}

" 'windwp/nvim-spectre' {{
  nnoremap <leader>S :lua require('spectre').open()<CR>

  "search current word
  nnoremap <leader>sw :lua require('spectre').open_visual({select_word=true})<CR>
  vnoremap <leader>s :lua require('spectre').open_visual()<CR>
  "  search in current file
  nnoremap <leader>sp viw:lua require('spectre').open_file_search()<cr>
" }}

" github/copilot.vim {{
  imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
  let g:copilot_no_tab_map = v:true
  let g:copilot_filetypes = {
        \ 'TelescopePrompt': v:false,
        \ }
" }}

lua << EOF
require("trouble").setup {}
EOF

lua << EOF
require'nvim-web-devicons'.setup {
  -- your personnal icons can go here (to override)
  -- DevIcon will be appended to `name`
  override = {
    zsh = {
      icon = "",
      color = "#428850",
      name = "Zsh"
      }
    };
  -- globally enable default icons (default to false)
  -- will get overriden by `get_icons` option
  default = true;
}
EOF

lua << EOF
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all"
  ensure_installed = { 
    'ruby',
    'javascript',
    'typescript',
    'c',
    'lua',
    'html',
    'css',
    'scss',
    'vim',
  },

  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = false,

  highlight = {
    enable = true,
  },
  matchup = {
    enable = true, -- mandatory, false will disable the whole extension
  },
  indent = {
    enable = false -- [IMPORTANT] Set to false to disable it as it causes an issue with nvim-cmp
  },
  -- This endwise is a part of 'RRethy/nvim-treesitter-endwise'
  endwise = {
    enable = true,
  },
  -- nvim-treesitter/nvim-treesitter-textobjects
  textobjects = {
    select = {
      enable = true,
      lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ['aa'] = '@parameter.outer',
        ['ia'] = '@parameter.inner',
        ['af'] = '@function.outer',
        ['if'] = '@function.inner',
        ['ac'] = '@class.outer',
        ['ic'] = '@class.inner',
      },
    },
  },
}
EOF

lua << EOF
require('telescope').setup {
  defaults = {
    prompt_prefix = " ",
    selection_caret = "❯ ",
    entry_prefix = " ",
    layout_config = {
      prompt_position = "top"
    },
    sorting_strategy = "ascending",
    vimgrep_arguments = {
      'rg',
      '--color=never',
      '--no-heading',
      '--with-filename',
      '--line-number',
      '--column',
      '--smart-case',
      '--ignore',
      '--hidden'
    },
    file_ignore_patterns = {
      '.git',
      'node_modules'
    }
  },
  pickers = {
    buffers = {
      sort_mru = true,
      ignore_current_buffer = true
    }
  },
  extensions = {
    fzf = {
      fuzzy = true,                    -- false will only do exact matching
      override_generic_sorter = true,  -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = 'smart_case',        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    },
    dash = {
      file_type_keywords = {
        ruby = { 'ruby', 'rails' }
      }
    }
  }
}

-- To get fzf loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
require('telescope').load_extension('fzf')

require('fzf-lua').setup('')
vim.keymap.set({ "n", "v", "i" }, "<C-x><C-f>",
  function() require("fzf-lua").complete_path() end,
  { silent = true, desc = "Fuzzy complete path" })
EOF

lua << EOF
require"gitlinker".setup()
EOF

lua << EOF
local hooks = require "ibl.hooks"
hooks.register(hooks.type.WHITESPACE, hooks.builtin.hide_first_space_indent_level)

require("ibl").setup()
EOF

lua << EOF
require("nvim-autopairs").setup {}
EOF

lua << EOF
vim.g.loaded_netrw = 2 -- nvim-tree recommended setting
vim.g.loaded_netrwPlugin = 1 -- nvim-tree recommended setting

require'nvim-tree'.setup {
  sort_by = "case_sensitive",
  hijack_cursor = true,
  view = {
    width = 35,
    adaptive_size = true,
  },
  diagnostics = {
    enable = true
  },
  renderer = {
    group_empty = true,
  },
  filters = {
    dotfiles = true,
  },
  actions = {
    open_file = {
      resize_window = true,
    }
  }
}
EOF

lua << EOF
require('gitsigns').setup {
  signs = {
    add = { text = '+' },
    change = { text = '~' },
    delete = { text = '_' },
    topdelete = { text = '‾' },
    changedelete = { text = '~' },
  },
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gs.next_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    map('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gs.prev_hunk() end)
      return '<Ignore>'
    end, {expr=true})
  end
}
EOF

lua << EOF
require("harpoon").setup()
vim.api.nvim_set_keymap('n', '<leader>ca', ':lua require("harpoon.mark").add_file()<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<leader>ct', ':lua require("harpoon.ui").toggle_quick_menu()<CR>', { noremap = true, silent = true })
EOF

" colorscheme settings
" colorscheme dracula_pro_blade
colorscheme onedark
" colorscheme catppuccin-macchiato
" colorscheme OceanicNext
" lua << EOF
"  vim.o.background = 'dark'
"
"  local c = require('vscode.colors')
"  require('vscode').setup({
"      -- Enable transparent background
"      transparent = false,
"
"      -- Enable italic comment
"      italic_comments = true,
"
"      -- Disable nvim-tree background color
"      disable_nvimtree_bg = true,
"  })
"
"  require('vscode').load()
" EOF

lua << EOF
local function truncate_branch_name(branch)
	if not branch or branch == "" then
		return ""
	end

	-- Match the branch name to the specified format
	local _, _, ticket_number = string.find(branch, "skdillon/sko%-(%d+)%-")

	-- If the branch name matches the format, display sko-{ticket_number}, otherwise display the full branch name
	if ticket_number then
		return "sko-" .. ticket_number
	else
		return branch
	end
end

local function harpoon_component()
	local mark_idx = require("harpoon.mark").get_current_index()
	if mark_idx == nil then
		return ""
	end

	return string.format("🪄 %d", mark_idx)
end

require'lualine'.setup {
  options = {
    globalstatus = true,
    theme = 'onedark',
    icons_enabled = false,
    component_separators = '│',
    section_separators = '',
  },
  sections = {
    lualine_b = {
      { "branch", icon = "", fmt = truncate_branch_name },
      { harpoon_component },
      "diff",
      "diagnostics",
    },
    lualine_c = {
      { "filename", path = 1 },
    },
  },
}
EOF

lua << EOF
require'hop'.setup()
vim.api.nvim_set_keymap('n', '<leader><leader>w', ':HopWordAC<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<leader><leader>b', ':HopWordBC<CR>', { noremap = true, silent = true })
EOF

lua << EOF
require('Comment').setup()
EOF

lua << EOF
require("toggleterm").setup{}
EOF

lua << EOF
require"fidget".setup{}
EOF

lua << EOF
require 'window-picker'.setup()
EOF

lua << EOF
require("oil").setup()
vim.keymap.set("n", "-", require("oil").open, { desc = "Open parent directory" })
EOF

lua << EOF
require("bufferline").setup {
  options = {
    offsets = {
      {
        filetype = "neo-tree",
        text = "EXPLORER",
        text_align = "left" ,
        separator = true }
    }
  }
}
EOF

lua << EOF
require("neo-tree").setup({
  filesystem = {
    window = {
      mappings = {
        ["<F5>"] = "refresh",
        ["o"] = "open",
      },
      width = 35,
    }
  },
  source_selector = {
    winbar = true,
    statusline = false
  }
})
EOF

lua << EOF
require("null-ls").setup({
  sources = {
    -- require("null-ls").builtins.diagnostics.eslint,
    require("null-ls").builtins.hover.dictionary,
    require("null-ls").builtins.completion.spell,
    require("null-ls").builtins.code_actions.gitsigns,
    -- require("null-ls").builtins.diagnostics.rubocop,
    -- require("null-ls").builtins.formatting.rubocop,
    -- require("null-ls").builtins.diagnostics.semgrep,
    -- require("null-ls").builtins.formatting.erb_lint,
    -- require("null-ls").builtins.diagnostics.erb_lint.with({
    --  filetypes = { "eruby", "eruby.html" },
    -- })
  },
})
EOF

lua << EOF
vim.g.Illuminate_ftblacklist = {'NvimTree'}
vim.api.nvim_set_keymap('n', '<a-n>', '<cmd>lua require"illuminate".next_reference{wrap=true}<cr>', {noremap=true})
vim.api.nvim_set_keymap('n', '<a-p>', '<cmd>lua require"illuminate".next_reference{reverse=true,wrap=true}<cr>', {noremap=true})
EOF

lua << EOF
-- Setup nvim-cmp.
local cmp = require'cmp'
local luasnip = require 'luasnip'
require('luasnip.loaders.from_vscode').lazy_load()
luasnip.config.setup {}

cmp.setup({
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  window = {
    -- completion = cmp.config.window.bordered(),
    -- documentation = cmp.config.window.bordered(),
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-[>'] = cmp.mapping.scroll_docs(-4),
    ['<C-]>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete {},
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_locally_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end, { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.locally_jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { 'i', 's' }),
  },
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
    }, {
     { name = 'buffer' },
  }),
})

-- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline({'/', '?'}, {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})
EOF

lua << EOF
-- [[ Configure LSP ]]
--  This function gets run when an LSP connects to a particular buffer.
local on_attach = function(_, bufnr)
  -- NOTE: Remember that lua is a real programming language, and as such it is possible
  -- to define small helper and utility functions so you don't have to repeat yourself
  -- many times.
  --
  -- In this case, we create a function that lets us more easily define mappings specific
  -- for LSP related items. It sets the mode, buffer and description for us each time.
  local nmap = function(keys, func, desc)
    if desc then
      desc = 'LSP: ' .. desc
    end

    vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
  end

  nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
  nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

  nmap('gd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinition')
  nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
  nmap('gI', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation')
  nmap('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type [D]efinition')
  nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
  nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

  -- See `:help K` for why this keymap
  nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
  nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

  -- Lesser used LSP functionality
  nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
  nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
  nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
  nmap('<leader>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, '[W]orkspace [L]ist Folders')

  -- Create a command `:Format` local to the LSP buffer
  vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
    vim.lsp.buf.format()
  end, { desc = 'Format current buffer with LSP' })
end

-- document existing key chains
require('which-key').register {
  ['<leader>c'] = { name = '[C]ode', _ = 'which_key_ignore' },
  ['<leader>d'] = { name = '[D]ocument', _ = 'which_key_ignore' },
  ['<leader>g'] = { name = '[G]it', _ = 'which_key_ignore' },
  ['<leader>h'] = { name = 'More git', _ = 'which_key_ignore' },
  ['<leader>r'] = { name = '[R]ename', _ = 'which_key_ignore' },
  ['<leader>s'] = { name = '[S]earch', _ = 'which_key_ignore' },
  ['<leader>w'] = { name = '[W]orkspace', _ = 'which_key_ignore' },
}

-- mason-lspconfig requires that these setup functions are called in this order
-- before setting up the servers.
require('mason').setup()
require('mason-lspconfig').setup()

-- Enable the following language servers
--  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
--
--  Add any additional override configuration in the following tables. They will be passed to
--  the `settings` field of the server config. You must look up that documentation yourself.
--
--  If you want to override the default filetypes that your language server will attach to you can
--  define the property 'filetypes' to the map in question.
local servers = {
  solargraph = {},
  -- ruby_ls = {},
  cssls = {},
  html = { filetypes = { 'html', 'erb', 'hbs'} },
  tsserver = {},
  lua_ls = {},
  tailwindcss = {},
  vimls = {},
  eslint = {},
  cssls = {},

  lua_ls = {
    Lua = {
      workspace = { checkThirdParty = false },
      telemetry = { enable = false },
    },
  },
}

-- Setup neovim lua configuration
require('neodev').setup()

-- nvim-cmp supports additional completion capabilities, so broadcast that to servers
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

-- Ensure the servers above are installed
local mason_lspconfig = require 'mason-lspconfig'

mason_lspconfig.setup {
  ensure_installed = vim.tbl_keys(servers),
}

mason_lspconfig.setup_handlers {
  function(server_name)
    require('lspconfig')[server_name].setup {
      capabilities = capabilities,
      on_attach = on_attach,
      settings = servers[server_name],
      filetypes = (servers[server_name] or {}).filetypes,
    }
  end,
}
EOF

lua << EOF
-- Functional wrapper for mapping custom keybindings
function Map(mode, lhs, rhs, opts)
    local options = { noremap = true }
    if opts then
        options = vim.tbl_extend("force", options, opts)
    end
    vim.api.nvim_set_keymap(mode, lhs, rhs, options)
end

-- You can move lines with a pair of keymaps in neovim without needing to copy and paste the line
Map("v", "J", ":m '>+1<CR>gv=gv")
Map("v", "K", ":m '<-2<CR>gv=gv")
Map("v", "<", "<gv", opts)
Map("v", ">", ">gv", opts)
EOF

source ~/.local_vimrc

" FIX CONSTANT SPELLING MISTAKES
" Copy content from https://raw.githubusercontent.com/moshahmed/vim/master/thesaurus/thesaurii.txt
" and in this file /Users/yanis/thesaurus/words.txt
" set thesaurus+=/Users/yanis/thesaurus/words.txt
iab Acheive    Achieve
iab acheive    achieve
iab Alos       Also
iab alos       also
iab Aslo       Also
iab aslo       also
iab Becuase    Because
iab becuase    because
iab Bianries   Binaries
iab Charcter   Character
iab charcter   character
iab Charcters  Characters
iab charcters  characters
iab Seperate   Separate
iab seperate   separate
iab biding     binding
iab binging    binding
iab biging     binding
iab bindng     binding
iab bindging   binding
iab bindgin    binding
iab gindin     binding
iab bindin     binding
iab bindign    binding
iab attachemnts attachments
iab attachemnt attachment
iab udpate     update
iab beybug     byebug
iab comit      commit
iab bharain    bharain
