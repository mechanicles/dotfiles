" IMPORTANT FOR CANCELLING/ABORTING GIT COMMIT
" Always use `:cq`.

if has('vim_starting')
  set nocompatible               " Be iMproved
endif

" VIM-PLUG
call plug#begin('~/.vim/plugged')

Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" RUBY
Plug 'sunaku/vim-ruby-minitest'
Plug 'thoughtbot/vim-rspec'

" Elixir
Plug 'elixir-editors/vim-elixir'

" JAVASCRIPT
Plug 'jelera/vim-javascript-syntax'
Plug 'leafoftree/vim-vue-plugin'

" TEMPLATES
Plug 'slim-template/vim-slim'

" TPOPE
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-git'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-dadbod'

" Dependent on 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'sodapopcan/vim-twiggy'

" COLORSCHEME
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'w0ng/vim-hybrid'
Plug 'ajh17/Spacegray.vim'
Plug 'yosiat/oceanic-next-vim'
Plug 'nanotech/jellybeans.vim'
Plug 'tomasr/molokai'
Plug 'KabbAmine/yowish.vim'
Plug 'rakr/vim-one'
Plug 'chriskempson/base16-vim'
Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
Plug 'jnurmine/Zenburn'
Plug 'fenetikm/falcon'
Plug 'arcticicestudio/nord-vim'
Plug 'danilo-augusto/vim-afterglow'
Plug 'smallwat3r/vim-simplicity'
Plug 'jaywilliams/vim-vwilight'

" ENHANCEMENT
Plug 'airblade/vim-gitgutter'
Plug 'janko-m/vim-test'
Plug 'Raimondi/delimitMate'
Plug 'google/vim-searchindex'
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-rooter'
Plug 'wincent/terminus'

" PRODUCTIVITY
Plug 'tpope/vim-commentary'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ervandew/supertab'
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'easymotion/vim-easymotion'
Plug 'szw/vim-maximizer'
Plug 'junegunn/vim-easy-align'
Plug 'mileszs/ack.vim', { 'on': 'Ack' }
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'rhysd/clever-f.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-repeat'
Plug 'wellle/targets.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'rhysd/committia.vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'AndrewRadev/tagalong.vim' 
Plug 'liuchengxu/vim-clap'
Plug 'liuchengxu/vista.vim'
Plug 'AaronLasseigne/yank-code'
Plug 'rhysd/vim-grammarous'

" FUN
Plug 'chrisbra/unicode.vim', { 'on': ['<plug>(UnicodeComplete)', '<plug>(UnicodeGA)', 'UnicodeTable'] }
Plug 'vim/killersheep'

" ASYNCHRONOUS
Plug 'thinca/vim-quickrun' " Ruby
Plug 'dense-analysis/ale'

" EXTRA
Plug 'lifepillar/vim-cheat40'
Plug 'chrisbra/csv.vim'
Plug 'AndrewRadev/quickpeek.vim'

call plug#end()

let g:make = 'gmake'
if exists('make')
  let g:make = 'make'
endif

if has('nvim')
  runtime! macros/matchit.vim
else
  " VIM HAS ITS VERY OWN'S 'ADD-PACKAGE' FEATURE:
  " This plugin makes the '%' command jump to matching HTML tags, if/else/endif in Vim scripts, etc.
  packadd! matchit
endif

let no_buffers_menu = 1
" COLORSHEME SETTINGS
if has('gui_running')
  if has("gui_macvim")
    set macligatures
    set guifont=JetBrains\ Mono:h15
    let g:onedark_terminal_italics = 1 " I love italic for comments
    colorscheme onedark
    " colorscheme jellybeans
    " colorscheme gruvbox
    " colorscheme molokai
    " colorscheme afterglow
  endif
else
  colorscheme hybrid
  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
      set term=xterm-256color
    endif
  endif
endif

" BASIC SETUP
syntax enable
set number                        " show line numbers
set ruler                         " show the cursor position all the time
set title                         " show file in titlebar
set encoding=utf-8                " set default encoding to UTF-8
set history=50                    " keep 50 lines of command line history
set ttymouse=xterm2
set mouse=a                       " automatically enable mouse usage in normal mode.
set mousehide                     " hide the mouse cursor while typing
set textwidth=80
set showcmd                       " display incomplete commands
set wildmenu                      " visual autocomplete for command menu
set ttyfast                       " faster redrawing.
set lazyredraw                    " don't redraw while executing macros (good performance config)
set showmatch                     " show matching brackets
set showmode                      " show current mode in command-line.
set matchtime=2                   " show matching bracket for 0.2 seconds
set autoindent                    " always set auto indenting on
set display=lastline              " show as much as possible of the last line.
set scrolloff=1                   " minimum lines to keep above and below cursor
set hidden                        " switch between buffers without having to save first.
set foldenable                    " auto fold code
set pastetoggle=<F2>
set confirm                       " get a dialog when :q, :w, or :wq fails
set cursorline                    " find the current line quickly.
set wrapscan                      " searches wrap around end-of-file
set bomb
set binary
set synmaxcol=256                 " This helps to avoid very slow redrawing for long lines
set updatetime=250                " delay time. Useful for showing git signs

" WHITESPACE
set nowrap                        " don't wrap text
set tabstop=2                     " tab spacing
set expandtab                     " use spaces instead of tabs
set softtabstop=2                 " unify
set shiftwidth=2                  " indent/outdent by 2 columns
set smarttab                      " use tabs at the start of a line, spaces elsewhere
set backspace=indent,eol,start    " backspace through everything in insert mode
set list                          " show invisible characters
set nojoinspaces                  " Use only 1 space after "." when joining lines, not 2

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" DISABLE SWAP FILES; SYSTEMS DON'T CRASH THAT OFTEN THESE DAYS
set updatecount=0

set showbreak=↪\

" SEARCHING
set hlsearch                      " highlight matches
set incsearch                     " incremental searching
set ignorecase                    " searches are case insensitive...
set smartcase                     " unless they contain at least one capital letter
set gdefault                      " have :s///g flag by default on

" TIME OUT ON KEY CODES BUT NOT MAPPINGS. BASICALLY THIS MAKES TERMINAL VIM WORK SANELY.
set notimeout
set ttimeout
set ttimeoutlen=100

" TAB COMPLETION
set wildmode=list:longest,list:full

" DISABLE OUTPUT AND VCS FILES
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem,tags,.fugitiveblame

" DISABLE ARCHIVE FILES
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" IGNORE BUNDLER AND SASS CACHE
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" IGNORE RAILS TEMPORARY ASSET CACHES
set wildignore+=*/tmp/*,*/solr/*,*/coverage/*,*/features/*,*/public/uploads/*

" DISABLE TEMP AND BACKUP FILES
set wildignore+=*.swp,*~,._*,tags

" BACKUP AND SWAP FILES
set nobackup                      " turn backup off, since most stuff is in SVN, Git etc anyway...
set nowb                          " no writebackup
set noswapfile

" Better display for messages
set cmdheight=2

set fileformats=unix,dos,mac

" OPEN NEW SPLIT PANES TO RIGHT AND BOTTOM, WHICH FEELS MORE NATURAL
set splitright
set splitbelow

" MAC'S OPTION KEY FOR YANKRING
if has('gui_running')
  set macmeta
endif

" AUTOCOMPLETE WITH DICTIONARY WORDS WHEN SPELL CHECK IS ON
set complete+=kspell

" ALWAYS USE VERTICAL DIFFS
set diffopt+=vertical

" TENDERLOVE'S SETTINGS
set suffixesadd=.rb
set path+=lib/**,test/**
set kp=ri " Use ri for help
set exrc
set secure

" indentLine plugin
let g:indentLine_color_term = 239
let g:indentLine_char = '¦'

" clever-f.vim plugin
let g:clever_f_ignore_case = 1

" TENDERLOVE'S SETTINGS
" Add stdlib of environment's ruby to path
let g:stdlib = system('ruby --disable-gems -rrbconfig -e"print RbConfig::CONFIG[\"rubylibdir\"]"')
let &path .= "," . stdlib
let g:ruby_path = &path

" For leafoftree/vim-vue-plugin
let g:vim_vue_plugin_load_full_syntax = 1

" For AndrewRadev/tagalong.vim
let g:tagalong_mappings = [{'c': '<leader>c'}, {'C': '<leader>C'}, 'v', 'i', 'a']

" make test commands execute using dispatch.vim
let test#strategy = "iterm"

" Setting for AndrewRadev/quickpeek.vim
let g:quickpeek_auto = v:true

" TENDERLOVE'S SETTINGS
if has("terminal")
  map <Leader>tt :terminal ++close<cr>
  tnoremap <Esc> <C-W>N
endif

set tags+=.git/tags

" INDICATOR CHARS
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

if has("statusline") && !&cp
  set laststatus=2              " always show the status bar
  set statusline=%f\ %m\ %r     " filename, modified, readonly
  set statusline+=%=            " switch to the right side
  set statusline+=\ %l/%L[%p%%] " current line/total lines
  set statusline+=\ %3v         " current column
  set statusline+=\ %Y\ %{FugitiveStatusline()}
endif

function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=\ %{GitStatus()}

" The silver searcher (Faster than the ack)
" Invoke ag using ack.vim
if executable("ag")
  " Use Ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  let g:ackprg = 'ag --vimgrep'
  let g:agprg="ag --column"
endif

" Plug 'shumphrey/fugitive-gitlab.vim' settings
let g:fugitive_gitlab_domains = ['https://gitlab.bitzesty.com']

let g:mapleader = ","

" TREAT <li> AND <p> TAGS LIKE THE BLOCK TAGS THEY ARE
let g:html_indent_tags = 'li\|p'

" NERDTREE SETTINGS
let g:NERDTreeHijackNetrw=1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" Better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

" Every time you open a git object using fugitive it creates a new buffer.
" This means that your buffer listing can quickly become swamped with
" fugitive buffers. This prevents this from becomming an issue:
autocmd BufReadPost fugitive://* set bufhidden=delete

let g:github_enterprise_urls = ['https://github.com']

" Turn off default key mappings
let g:multi_cursor_use_default_mapping=0

" Ctrl-n, Ctrl-p, Ctrl-x, and <Esc> are mapped in the special multicursor
" mode once you've added at least one virtual cursor to the buffer
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Time limit of each task in seconds for vim-plug
let g:plug_timeout = 100

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

let g:rspec_command = "bundle exec rspec {spec}"
let g:rspec_runner = "os_x_iterm2"

let g:ale_linters = {
      \   'ruby': ['rubocop'],
      \   'javascript': ['eslint'],
      \}

let g:ale_fixers = {
      \    'ruby': ['rubocop'],
      \}

let g:ale_fix_on_save = 1

function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? '✨ all good ✨' : printf(
        \   '😞 %dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
endfunction

set statusline+=\ %{LinterStatus()}

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" rename current file (thanks Gary Bernhardt)
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
command! RENAME call RenameFile()

" vim-javascript
augroup vimrc-javascript
  autocmd!
  autocmd FileType javascript set tabstop=4|set shiftwidth=4|set expandtab softtabstop=4
augroup END

" ruby
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

augroup vimrc-ruby
  autocmd!
  autocmd BufNewFile,BufRead *.rb,*.rbw,*.gemspec setlocal filetype=ruby
  autocmd FileType ruby set tabstop=2|set shiftwidth=2|set expandtab softtabstop=2
augroup END

let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

"Highlight column for 119 characters.
if exists('+colorcolumn')
  set colorcolumn=+1
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80.\+', -1)
endif

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Show next matched string at the center of screen
nnoremap n nzz
nnoremap N Nzz

" FZF mappings
nnoremap <c-b> :Buffers<cr>
nnoremap <c-p> :GFiles<cr>

" puts the calller (Thanks to @tenderlove)
nnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc>

nnoremap \ :Ack<SPACE>

" Disable 'Entering Ex mode'
map Q <Nop>
map gs <Nop>

" MOVEMENT
nnoremap j gj
nnoremap k gk

" highlight last inserted text
nnoremap gV `[v`]

" Ruby hash syntax conversion
nnoremap <F12> :%s/:\([^ ]*\)\(\s*\)=>/\1:/g<return>

" EASY COPY AND PASTE
" yank to system clipboard
map <leader>y "*y

" paste lines from unnamed register and fix indentation
nmap <leader>p pV`]=
nmap <leader>P PV`]=

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags --tag-relative=yes --extras=+f -Rf.git/tags --exclude=.git --exclude=pkg --exclude=.ext --languages=-javascript,sql<cr><cr>

map <Leader>n :NERDTreeToggle<CR>

map <c-a> ggVG

" format the entire file
nmap <leader>fef ggVG=

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" find Git merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Adjust viewports to the same size
map <Leader>= <C-w>=

" vim-maximizer (Zoom)
noremap <Leader>zw :MaximizerToggle<CR>
vnoremap <Leader>zw :MaximizerToggle<CR>gv
inoremap <Leader>zw <C-o>:MaximizerToggle<CR>

" TagbarToggle
nnoremap <Leader>rt :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" disable cursor keys in normal mode
map <Left>  :echoe "Use h"<cr>
map <Right> :echoe "Use l"<cr>
map <Up>    :echoe "Use k"<cr>
map <Down>  :echoe "Use j"<cr>

" Git Hunks
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
nmap <Leader>hv <Plug>(GitGutterPreviewHunk) " Preview hunk

" Git Gutter temporary for jellybeans colorsheme (REMOVE IT Later) https://github.com/airblade/vim-gitgutter/commit/afa4f2ddf0fecb37914ec37357636abb18013422
" highlight GitGutterAdd    guifg=#009900 guibg=#151515 ctermfg=2 ctermbg=2
" highlight GitGutterChange guifg=#bbbb00 guibg=#151515 ctermfg=3 ctermbg=3
" highlight GitGutterDelete guifg=#ff2222 guibg=#151515 ctermfg=1 ctermbg=1

"Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

" In command-line mode, C-a jumps to beginning (to match C-e)
cnoremap <C-a> <Home>

" Exit insert mode without using Esc
inoremap jj <Esc>

" Easy edit/open commands
command! EditVim  :edit   ~/.vimrc
command! EditBash :edit   ~/.bashrc

function! s:setWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=80
endfunction

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType {make,gitconfig} set noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setWrapping()

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json setf javascript

  " Better commit message
  au Filetype gitcommit setlocal spell textwidth=72

  " For all text files set 'textwidth' to 80 characters.
  au Filetype text setlocal textwidth=80

  " Enable spellchecking for Markdown
  au FileType markdown setlocal spell

  " Opnes NERDTree automatically when vim starts up if no files were specified
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  au FileType javascript set formatprg=prettier\ --stdin
endif

" coc settings.
nmap <silent> gd <Plug>(coc-definition)

nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" FIX CONSTANT SPELLING MISTAKES
" Copy content from https://raw.githubusercontent.com/moshahmed/vim/master/thesaurus/thesaurii.txt
" and in this file /Users/yanis/thesaurus/words.txt
set thesaurus+=/Users/yanis/thesaurus/words.txt
iab Acheive    Achieve
iab acheive    achieve
iab Alos       Also
iab alos       also
iab Aslo       Also
iab aslo       also
iab Becuase    Because
iab becuase    because
iab Bianries   Binaries
iab Charcter   Character
iab charcter   character
iab Charcters  Characters
iab charcters  characters
iab Seperate   Separate
iab seperate   separate
iab biding     binding
iab binging    binding
iab biging     binding
iab bindng     binding
iab bindging   binding
iab bindgin    binding
iab gindin     binding
iab bindin     binding
iab bindign    binding
iab attachemnts attachments
iab attachemnt attachment
iab udpate     update
