#!/usr/bin/env ruby

require 'irb/completion'
require 'irb/ext/save-history'

# irb history
IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb_history"

# configure irb
IRB.conf[:PROMPT_MODE] = :SIMPLE

IRB.conf[:AUTO_INDENT] = true

# interactive editor: use vim from within irb
begin
  require 'rubygems'
  require 'interactive_editor'
rescue LoadError => e
  warn "Couldn't load interactive_editor: #{e}"
end

# load .irbrc_rails in rails environments
railsrc_path = File.expand_path('~/.irbrc_rails')
if (ENV['RAILS_ENV'] || defined? Rails) && File.exist?(railsrc_path)
  begin
    load railsrc_path
  rescue Exception
    warn "Could not load: #{railsrc_path} because of #{$!.message}"
  end
end

def y(obj)
  puts obj.to_yaml
end

def r!
  reload!
end

# Copies the result of the last operation you ran in IRB to the system
# clipboard (if you're on macOS).
def cop
  last_value = IRB.CurrentContext.last_value
  `echo '#{last_value}' | pbcopy`
  "copied \`#{last_value}' to your clipboard"
end

class Object
  def mate(method_name)
    file, line = method(method_name).source_location
    `mvim '#{file}' -l #{line}`
  end

  def local_methods
    (methods - Object.instance_methods).sort
  end
end

# awesome print
begin
  require 'awesome_print'
  AwesomePrint.irb!
rescue LoadError => e
  warn "Couldn't load awesome_print: #{e}"
end

# e.g. 1
# log_to(STDOUT) => This is useful for debugging in Rails console
# User.first
#
# e.g. 2
# buffer = StringIO.new
# log_to buffer
# User.first
# puts buffer.string

if defined? Rails
  def log_to(stream, colorize = true)
    ActiveRecord::Base.logger = Logger.new(stream)
    ActiveRecord::Base.clear_active_connections!
    ActiveSupport::LogSubscriber.colorize_logging = colorize
  end
end
